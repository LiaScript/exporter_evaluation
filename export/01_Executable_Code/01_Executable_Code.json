{
  "title": [
    {
      "Chars": "Executable Code",
      "a": null
    }
  ],
  "str_title": "Executable Code",
  "definition": {
    "author": "Your Name",
    "date": "",
    "email": "your@mail.org",
    "language": "en",
    "logo": "",
    "version": "0.0.1",
    "base": "",
    "narrator": "US English Female",
    "onload": "",
    "comment": [],
    "attributes": [],
    "resources": [
      {
        "Script": "https://cdn.jsdelivr.net/npm/phoenix-js@1.0.3/dist/glob/main.js"
      },
      {
        "Script": "https://cdn.jsdelivr.net/gh/liatemplates/avr8js@0.0.9/dist/index.js"
      }
    ],
    "translation": {},
    "macro": {
      "AVR8js.asm": "<script>\nlet id = \"@0\"\n\nAVR8js.buildASM(`@input`)\n   .then((e) => {\n     if (e.hex === \"\") {\n       let msgs = []\n\n       let iter = e.stderr.matchAll(/main\\.s:(\\d+):(\\d+): ([^:]+):(.+)/g)\n\n       for(let err=iter.next(); !err.done; err=iter.next()) {\n         msgs.push({\n           row :    parseInt(err.value[1]) - 1,\n           column : parseInt(err.value[2]),\n           text :   err.value[4],\n           type :   err.value[3].toLower()\n         })\n       }\n       send.lia(e.stderr, [msgs], false)\n       send.lia(\"LIA: stop\")\n     }\n     else {\n       console.debug(e.stdout)\n\n       if (e.hex) {\n         let runner = AVR8js.execute(e.hex, console.log, id)\n\n         send.handle(\"input\", (input) => {\n            runner.serial(input.slice(0, -1))\n         })\n\n         send.lia(\"LIA: terminal\")\n\n         send.handle(\"stop\", e => {\n           if(runner) {\n             runner.stop()\n             runner = null\n             console.debug(\"execution stopped\")\n           }\n         })\n       } else {\n         send.lia(\"LIA: stop\")\n       }\n     }\n   })\n\"LIA: wait\"\n</script>\n",
      "AVR8js.project": "<script>\nlet id = \"@0\"\n\nlet name = [\n  \"@1\", \"@2\", \"@3\", \"@4\", \"@5\", \"@6\", \"@7\", \"@8\", \"@9\"\n  ]\n  .map((e) => e.trim())\n  .filter((e) => { return (e[0] !== '@' && e !== \"\") })\n\nlet content = [\n  `@input(0)`,\n  `@input(1)`,\n  `@input(2)`,\n  `@input(3)`,\n  `@input(4)`,\n  `@input(5)`,\n  `@input(6)`,\n  `@input(7)`,\n  `@input(8)`,\n  `@input(9)`\n  ]\n\nlet sketch;\nlet files = []\n\nfor(let i=0; i<name.length; i++) {\n  if (name[i] == \"sketch.ino\") {\n    sketch = content[i]\n  } else {\n    files.push({name: name[i], content: content[i]})\n  }\n}\n\nAVR8js.build(sketch, files)\n   .then((e) => {\n     if (e.hex === \"\") {\n       let msgs = []\n\n       for(let i = 0; i<name.length; i++) {\n         msgs.push([])\n       }\n\n       let iter = e.stderr.matchAll(/(\\w+\\.\\w+):(\\d+):(\\d+): ([^:]+):(.+)/g)\n\n       for(let err=iter.next(); !err.done; err=iter.next()) {\n         msgs[name.findIndex((e) => e==err.value[1])].push({\n           row :    parseInt(err.value[2]) - 1,\n           column : parseInt(err.value[3]),\n           text :   err.value[5],\n           type :   err.value[4]\n         })\n       }\n       send.lia(e.stderr, msgs, false)\n       send.lia(\"LIA: stop\")\n     }\n     else {\n       console.debug(e.stdout)\n\n       if (e.hex) {\n         let runner = AVR8js.execute(e.hex, console.log, id)\n\n         send.handle(\"input\", (input) => {\n            runner.serial(input.slice(0, -1))\n         })\n\n         send.lia(\"LIA: terminal\")\n\n         send.handle(\"stop\", e => {\n           if(runner) {\n             runner.stop()\n             runner = null\n             console.debug(\"execution stopped\")\n           }\n         })\n       } else {\n         send.lia(\"LIA: stop\")\n       }\n     }\n   })\n\"LIA: wait\"\n</script>\n",
      "AVR8js.sketch": "@AVR8js.project(@0,sketch.ino)",
      "LIA.eval": "@LIA.eval_(false,@uid,`@0`,@1,@2)",
      "LIA.evalWithDebug": "@LIA.eval_(true,@uid,`@0`,@1,@2)",
      "LIA.eval_": "<script>\nvar hash = Math.random().toString(36).replace(/[^a-z]+/g, '')\nvar ROOT_SOCKET = 'wss://liarunner.herokuapp.com/socket'; // default path is /socket\n//var ROOT_SOCKET = 'ws://localhost:4000/socket'; // default path is /socket\n\n\nvar socket = new Socket(ROOT_SOCKET,\n  { timeout: 30000,\n  logger: function(kind, msg, data) {\n      window.console.log(`${kind}: ${msg}`, data)\n  }\n});\n\nsocket.connect(); // connect\nvar chan = socket.channel(\"lia:\"+hash);\n\nlet current_retries = 0;\n\nconst timer = (() => {\n  let counter = 105; // seconds (found by testing)\n\n  const timerHandle = setInterval(() => {\n    if(counter > 0) {\n        if (counter == 105) console.debug(\"starting the process\");\n        counter--;\n        if(counter < 95 && counter % 2 == 0) console.stream(\".\");\n    }\n    else if(counter <= 0) {\n      console.log(`Couldn't reach server in the estimated time. Is your internet connection working?`)\n    }\n  }, 1000);\n\n  const stop = () => {\n    clearInterval(timerHandle);\n    console.clear();\n  };\n\n  const timer = {\n    stop: stop\n  };\n\n  return timer;\n})();\n\nchan.on(\"service\", (e) => {\n  if (e.message.stderr)\n    console.error(e.message.stderr)\n  else if (e.message.stdout) {\n    if (!e.message.stdout.startsWith(\"Warning: cannot switch \"))\n      console.stream(e.message.stdout)\n  }\n  else if (e.message.exit) {\n    if(@0) console.debug(e.message.exit)\n    send.lia(\"LIA: stop\")\n  }\n  else if (e.message.images) {\n    for(let i = 0; i < e.message.images.length; i++) {\n      console.html(\"<hr/>\")\n      console.html(\"<img src='\" + e.message.images[i].data + \"' onclick='window.img_Click(\\\"\" + e.message.images[i].data + \"\\\")'>\")\n    }\n  }\n})\n\n// error hook gets called, when a reconnect is attemted\nsocket.onError((e) => {\n  current_retries++\n})\n\nvar order = @2\nvar files = {}\n\nif (order[0])\n  files[order[0]] = `@input(0)`\nif (order[1])\n  files[order[1]] = `@input(1)`\nif (order[2])\n  files[order[2]] = `@input(2)`\nif (order[3])\n  files[order[3]] = `@input(3)`\nif (order[4])\n  files[order[4]] = `@input(4)`\nif (order[5])\n  files[order[5]] = `@input(5)`\nif (order[6])\n  files[order[6]] = `@input(6)`\nif (order[7])\n  files[order[7]] = `@input(7)`\nif (order[8])\n  files[order[8]] = `@input(8)`\nif (order[9])\n  files[order[9]] = `@input(9)`\n\n\nchan.join()\n.receive(\"ok\", (e) => {\n    chan.push(\"lia\", {event_id: \"@1\", message: {start: \"CodeRunner\", settings: null}})\n    .receive(\"ok\", (e) => {\n        chan.push(\"lia\", {event_id: \"@1\", message: {files: files}})\n        .receive(\"ok\", (e) => {\n            if(@0) console.debug(e.message)\n            chan.push(\"lia\", {event_id: \"@1\", message: {compile: @3, order: order}})\n            .receive(\"ok\", (e) => {\n                if(@0) console.debug(e.message)\n                chan.push(\"lia\", {event_id: \"@1\", message: {execute: @4}})\n                .receive(\"ok\", (e) => {\n                    timer.stop();\n                    send.lia(\"LIA: terminal\")\n                })\n                .receive(\"error\", (e) => {\n                    timer.stop();\n                    console.err(\"could not start application => \", e)\n                    chan.push(\"lia\", {event_id: \"@1\", message: {stop: \"\"}})\n                    send.lia(\"LIA: stop\")\n                })\n            })\n            .receive(\"error\", (e) => {\n                timer.stop();\n                send.lia(e.message, e.details, false)\n                chan.push(\"lia\", {event_id: \"@1\", message: {stop: \"\"}})\n                send.lia(\"LIA: stop\")\n            })\n        })\n        .receive(\"error\", (e) => {\n            timer.stop();\n            lia.error(\"could not setup files => \", e)\n            chan.push(\"lia\", {event_id: \"@1\", message: {stop: \"\"}})\n            send.lia(\"LIA: stop\")\n        })\n    })\n    .receive(\"error\", (e) => {\n        timer.stop();\n        lia.error(\"could not start service => \", e)\n        chan.push(\"lia\", {event_id: \"@1\", message: {stop: \"\"}})\n        send.lia(\"LIA: stop\")\n    })\n})\n.receive(\"error\", (e) => {\n  timer.stop();\n  lia.error(\"channel join => \", e);\n});\n\n\nsend.handle(\"input\", (e) => {\n    chan.push(\"lia\", {event_id: \"@1\", message: {input: e}})\n})\nsend.handle(\"stop\",  (e) => {\n    chan.push(\"lia\", {event_id: \"@1\", message: {stop: \"\"}})\n});\n\n\n\"LIA: wait\"\n</script>",
      "comment": "This template allows to run C, C++, C# code on a server, while communication with LiaScript-courses."
    }
  },
  "comment": "",
  "readme": "",
  "url": "",
  "origin": "",
  "sections": [
    {
      "title": [
        {
          "Chars": "Executable Code",
          "a": null
        }
      ],
      "code": "\n```c            \n#include <stdio.h>\n#include <stdlib.h>\n\n#define ZIELWERT 18\n\nint main(void)\n{\n  int a[] = {1, 2, 5, 7, 9, 10, 12, 13, 16, 17, 18, 21, 25};\n  int *ptr_left = a;\n  int *ptr_right = (int *)(&a + 1) - 1;\n  printf(\"Value left %3d right %d\\n-----------------------\\n\", *ptr_left, * ptr_right);\n  do{\n    printf(\"Value left %3d right %d\", *ptr_left, * ptr_right);\n    if (*ptr_right + *ptr_left == ZIELWERT){\n       printf(\" -> TREFFER\");\n    }\n    printf(\"\\n\");\n    if (*ptr_right + *ptr_left >= ZIELWERT) ptr_right--;\n    else ptr_left++;\n  }while (ptr_right != ptr_left);\n  return EXIT_SUCCESS;\n}\n```\n@LIA.eval(`[\"main.c\"]`, `gcc -Wall main.c -o a.out`, `./a.out`)\n\n",
      "indentation": 1
    }
  ],
  "section_active": 0,
  "version": 0,
  "translation": "en"
}